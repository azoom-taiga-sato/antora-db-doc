steps:
  # Retrieve environment variables from secrets and save to .env file
  - id: prepare-secret
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['-']
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --project=${PROJECT_ID} --secret=${_APP_NAME}-env --format='get(payload.data)' | tr '_-' '/+' | base64 -d > .env
  
  # Display the contents of the .env file (should be removed later)
  - id: echo-secrets
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['prepare-secret']
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Contents of .env:"
        cat .env
  
  # Create Cloud SQL socket folder and set appropriate permissions
  - id: prepare-socket-folder
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['-']
    entrypoint: bash
    args:
      - '-c'
      - |
        [ -d /cloudsql ] || mkdir /cloudsql
        chmod -R 777 /cloudsql
    volumes:
      - name: cloudsql
        path: /cloudsql
  
  # Start the Cloud SQL proxy
  - id: start-cloudsql-proxy
    name: '${_CLOUD_SQL_PROXY_IMAGE_NAME}'
    waitFor: [prepare-socket-folder]
    args:
      - /cloud_sql_proxy
      - '-dir=/cloudsql'
      - '-instances=${_CLOUD_SQL_INSTANCES}'
    volumes:
      - name: cloudsql
        path: /cloudsql
  
  # Migrate the database
  - id: migrate-database
    name: 'gcr.io/cloud-builders/yarn:node-20.11.0'
    entrypoint: bash
    waitFor: [prepare-secret, prepare-socket-folder]
    args:
      - '-c'
      - >
        source .env
        mv package.json package.json.bak && echo '{"dependencies":
        {"drizzle-orm": "0.31.2","drizzle-kit": "0.22.8","mysql2": "3.9.6"}}' >
        package.json && yarn && yarn drizzle-kit migrate
    volumes:
      - name: cloudsql
        path: /cloudsql
  
  # Stop the Cloud SQL proxy
  - id: kill-cloudsql-proxy
    name: gcr.io/cloud-builders/docker
    waitFor: [migrate-database]
    entrypoint: sh
    args:
      - -c
      - 'docker ps -q --filter ancestor="${_CLOUD_SQL_PROXY_IMAGE_NAME}" | xargs docker stop'
  
  # Pull the pandoc/core Docker image
  - id: pull-pandoc
    name: 'gcr.io/cloud-builders/docker'
    waitFor: [kill-cloudsql-proxy]
    args: ['pull', 'pandoc/core']

  # Set execute permission for the script
  - id: set-execute-permission
    name: 'gcr.io/cloud-builders/gcloud'
    entrypoint: 'sh'
    args:
      - '-c'
      - 'chmod +x convert-tbls-doc.sh'
  
  # Run the script to convert the tbls documentation
  - id: convert-tbls-doc
    name: 'gcr.io/cloud-builders/gcloud'
    waitFor: [set-execute-permission]
    entrypoint: 'sh'
    args:
      - '-c'
      - './convert-tbls-doc.sh'
    # Commands to run locally
      # chmod +x convert-tbls-doc.sh
      # ./convert-tbls-doc.sh

  # Echo the contents of docs/modules/tbls/ (should be removed later)
  - id: echo-tbls-doc
    name: 'gcr.io/cloud-builders/gcloud'
    waitFor: [convert-tbls-doc]
    entrypoint: 'sh'
    args:
      - '-c'
      - 'echo "Contents of docs/modules/tbls/:" && ls -R docs/modules/tbls/'

  # Fetch the Antora documentation
  - id: antora-doc-creation
    name: 'antora/antora'
    args: 
      - --fetch
      - antora-playbook.yml
      # Commands to run locally
        # docker run --rm --platform linux/amd64 -v $PWD:/work -w /work antora/antora antora --fetch antora-playbook.yml

  # Build the app image via DockerFile (Container Registry is used)
  - id: build-app-image
    name: 'gcr.io/kaniko-project/executor:latest'
    waitFor: ['antora-doc-creation']
    args:
      - --dockerfile=./cicd/dev/Dockerfile
      - --destination=gcr.io/${PROJECT_ID}/${_APP_NAME}:${_TAG_NAME}

  # Build the app image via DockerFile (Artifact Registry is used)
  # - id: build-app-image
  #   name: 'gcr.io/kaniko-project/executor:latest'
  #   waitFor: ['antora-doc-creation']
  #   args:
  #     - --dockerfile=${_APP_DOCKER_FILE}
  #     - --destination=asia-northeast1-docker.pkg.dev/azoom-taiga-satou/antora-demo:latest
  #     - --cache=true
      # Commands to run locally
        # docker build -t test -f ./cicd/dev/Dockerfile .
        # docker run -p 8080:8080 test

  - id: "deploy"
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud beta run deploy ${_APP_NAME} \
          --platform managed \
          --region asia-northeast1 \
          --allow-unauthenticated \
          --image gcr.io/${PROJECT_ID}/${_APP_NAME}:${_TAG_NAME}

substitutions:
  _APP_NAME: antora-db-doc
  _APP_DOCKER_FILE: cicd/dev/Dockerfile
  _TAG_NAME: latest
  _CLOUD_SQL_INSTANCES: azoom-taiga-satou:asia-northeast1:tbls-demo
  _CLOUD_SQL_PROXY_IMAGE_NAME: 'gcr.io/cloudsql-docker/gce-proxy:1.35.4'
timeout: 900s
options:
  logging: CLOUD_LOGGING_ONLY