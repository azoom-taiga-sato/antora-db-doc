steps:
  - id: prepare-secret
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['-']
    entrypoint: bash
    args:
      - '-c'
      - |
        gcloud secrets versions access latest --project=${PROJECT_ID} --secret=${_APP_NAME}-env --format='get(payload.data)' | tr '_-' '/+' | base64 -d > .env
  - id: echo-secrets
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['prepare-secret']
    entrypoint: bash
    args:
      - '-c'
      - |
        echo "Contents of .env:"
        cat .env
  - id: prepare-socket-folder
    name: gcr.io/cloud-builders/gcloud
    waitFor: ['-']
    entrypoint: bash
    args:
      - '-c'
      - |
        [ -d /cloudsql ] || mkdir /cloudsql
        chmod -R 777 /cloudsql
    volumes:
      - name: cloudsql
        path: /cloudsql
  - id: start-cloudsql-proxy
    name: '${_CLOUD_SQL_PROXY_IMAGE_NAME}'
    waitFor: [prepare-socket-folder]
    args:
      - /cloud_sql_proxy
      - '-dir=/cloudsql'
      - '-instances=${_CLOUD_SQL_INSTANCES}'
    volumes:
      - name: cloudsql
        path: /cloudsql
  - id: migrate-database
    name: 'gcr.io/cloud-builders/yarn:node-20.11.0'
    entrypoint: bash
    waitFor: [prepare-secret, prepare-socket-folder]
    args:
      - '-c'
      - |
        source .env
        mv package.json package.json.bak && echo '{"dependencies":{"drizzle-orm":"0.31.2","drizzle-kit":"0.22.8","mysql2":"3.9.6"}}' > package.json && yarn && yarn drizzle-kit migrate
    volumes:
      - name: cloudsql
        path: /cloudsql
  # - id: tbls-doc-creation
  #   name: 'ghcr.io/k1low/tbls'
  #   args:
  #       - '-c' 
  #       - | 
  #       tbls doc 'mysql://root:@localhost:3306/tbls_demo_box'
  - id: kill-cloudsql-proxy
    name: gcr.io/cloud-builders/docker
    waitFor: [migrate-database]
    entrypoint: sh
    args:
      - -c
      - 'docker ps -q --filter ancestor="${_CLOUD_SQL_PROXY_IMAGE_NAME}" | xargs docker stop'
  - id: build-docker-image
    name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/pandoc-converter', '-f', './cicd/dev/Dockerfile', '.']

  - id: convert-md-asciidoc
    name: 'gcr.io/$PROJECT_ID/pandoc-converter'
    entrypoint: 'bash'
    env: 
      - 'PANDOC_INPUT=docs'
      - 'PANDOC_OUTPUT=outputs'
    args:
      - '-c'
      - |
        chmod +x ./convert-tbls-doc.sh
        ./convert-tbls-doc.sh

# chmod +x convert_md_to_adoc.sh
# ./convert-tbls-doc.sh

  - id: antora-doc-creation
    name: 'antora/antora'
    args: 
      - --fetch
      - antora-playbook.yml
# docker run --rm --platform linux/amd64 -v $PWD:/work -w /work antora/antora antora --fetch antora-playbook.yml

  - id: build
    name: 'gcr.io/kaniko-project/executor:latest'
    args:
      - --dockerfile=./cicd/dev/Dockerfile
      - --destination=gcr.io/${PROJECT_ID}/${_APP_NAME}:${_TAG_NAME}

# docker build -t test -f ./cicd/dev/Dockerfile .
# docker run -p 3000:3000 test

  - id: "deploy"
    name: gcr.io/cloud-builders/gcloud
    entrypoint: bash
    args:
      - -c
      - |
        gcloud beta run deploy ${_APP_NAME} \
          --platform managed \
          --region asia-northeast1 \
          --allow-unauthenticated \
          --image gcr.io/${PROJECT_ID}/${_APP_NAME} \

substitutions:
  _APP_NAME: antora-db-doc
  _TAG_NAME: latest
  _CLOUD_SQL_INSTANCES: azoom-taiga-satou:asia-northeast1:tbls-demo
  _CLOUD_SQL_PROXY_IMAGE_NAME: 'gcr.io/cloudsql-docker/gce-proxy:1.35.4'
timeout: 900s
options:
  logging: CLOUD_LOGGING_ONLY